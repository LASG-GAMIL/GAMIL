#!/usr/bin/env perl
#=======================================================================
#
#  This is a script to build a namelist.
#
# Usage:
#
# perl build-namelist.pl [options]
#
# For help on options do:
#
# perl build-namelist.pl -help
#
#=======================================================================
use strict;
#use warnings;
#use diagnostics;

use Cwd;
use Getopt::Long;
use English;

#-----------------------------------------------------------------------------------------------

my $ProgName;
($ProgName = $PROGRAM_NAME) =~ s!(.*)/!!; # name of program
my $ProgDir = $1;                         # name of directory where program lives

my $cfg_cache = "config_cache.xml";       # Default name of configuration cache file
my $nlfilename = "namelist";              # Default name of output namelist file

sub usage {
    die <<EOF;
SYNOPSIS
     $ProgName [options]
OPTIONS
     -gamil_cfg "dir"        Directory containing GAMIL configuration scripts.
     -case "name"          Case identifier up to 32 characters
     -config "file"        Read the given config cache file to get the configuration
                           of the GAMIL executable.  Default: $cfg_cache.
     -csmdata "dir"        Head directory location of CCSM input data.
                           Can also be set by using the CSMDATA environment variable.
     -h                    Print usage to STDOUT.
     -i                    Turns on interactive prompting to modify a namelist.
     -infile "file"        Specify a namelist file to read values from.
     -namelist "namelist"  Specify namelist settings using FORTRAN namelist syntax, e.g.,
                              -namelist "&atmexp nelapse=-10, trace_gas=.true. /"
     -o "file"             Filename of output namelist.  Default: $nlfilename
     -runtype "type"       Type of simulation (initial, restart, or branch)
     -s                    Turns on silent mode - only fatal messages issued.
     -test                 Enable checking that initial and boundary datasets exist on local filesystem.
     -v n                  Set verbosity to level n.  1 (default), 2 or 3.

Note: The precedence for setting the values of namelist variables is:
      1. interactive prompting,
      2. specific namelist options set on the command-line (-case and -runtype),
      3. values set using the -namelist option,
      4. values read from the file specified by -infile,
      5. hard-coded values from defaults files in the GAMIL configuration
         script directory.
EOF
}

#-----------------------------------------------------------------------------------------------

my $cwd = getcwd();  # current working directory

# Parse command-line options.
my %opts = ( config       => $cfg_cache,
	     help         => 0,
	     interactive  => 0,
	     out          => $nlfilename,
	     silent       => 0,
	     test         => 0,
	    );

GetOptions(
    "gamil_cfg=s"                 => \$opts{'gamil_cfg'},
    "case=s"                    => \$opts{'case'},
    "config=s"                  => \$opts{'config'},
    "csmdata=s"                 => \$opts{'csmdata'},
    "h|help"                    => \$opts{'help'},
    "i|interactive"             => \$opts{'interactive'},
    "infile=s"                  => \$opts{'infile'},
    "namelist=s"                => \$opts{'namelist'},
    "o|out=s"                   => \$opts{'out'},
    "runtype=s"                 => \$opts{'runtype'},
    "s|silent"                  => \$opts{'silent'},
    "test"                      => \$opts{'test'},
    "v|verbose=s"               => \$opts{'verbose'},
)  or usage();

# Give usage message.
usage() if $opts{'help'};

# Check for unparsed arguments
if (@ARGV) {
    print "ERROR: unrecognized arguments: @ARGV\n";
    usage();
}

# Define print levels:
# 0 - only issue fatal error messages
# 1 - only informs what files are created (default)
# 2 - echo verbosely
$opts{'printlev'} = 1;
if ($opts{'silent'}) { $opts{'printlev'} = 0; }
if ($opts{'verbose'}>=2) { $opts{'printlev'} = $opts{'verbose'}; }

# End of line
my $eol = "\n";
if ($opts{'interactive'}) { $eol = "\n\n"; }

#-----------------------------------------------------------------------------------------------
# Make sure we can find required perl modules and configuration files.
my $cfgdir;                         # directory containing GAMIL configuration scripts
if (defined $opts{'gamil_cfg'}) {
    $cfgdir = $opts{'gamil_cfg'};
} elsif (defined $ENV{GAMIL_CFGDIR}) {
    $cfgdir = "$ENV{GAMIL_CFGDIR}";
} elsif (defined $ENV{GAMIL_ROOT}) {
    $cfgdir = "$ENV{GAMIL_ROOT}/models/atm/gamil/bld";
} else {
    if ($ProgDir) { $cfgdir = $ProgDir; }
    else { $cfgdir = $cwd; }
}

my $die_message =
"** This file is supplied with the GAMIL source distribution in the\n"          .
"** directory containing the GAMIL configuration scripts.  This directory can\n" .
"** be specified as follows (highest to lowest precedence):\n"                 .
"** - by the command-line option -gamil_cfg\n"                                   .
"** - by the environment variable GAMIL_CFGDIR\n"                                .
"** - by the environment variable GAMIL_ROOT (the configuration\n"               .
"**   script directory is GAMIL_ROOT/models/atm/gamil/bld)\n"                      .
"** The default value is the directory the contains the $ProgName script. \n";

(-f "$cfgdir/ATM_namelist.pm")  or  die <<"EOF";
** Cannot find perl module \"ATM_namelist.pm\" in directory \"$cfgdir\" **
$die_message
EOF
(-f "$cfgdir/XML/Lite.pm")  or  die <<"EOF";
** Cannot find perl module \"XML/Lite.pm\" in directory \"$cfgdir\" **
$die_message
EOF
$cfgdir = absolute_path($cfgdir);

if ($opts{'printlev'}>2) {
  print "Setting GAMIL configuration script directory to $cfgdir$eol";
}

#-----------------------------------------------------------------------------------------------
# Add $cfgdir to the list of paths that Perl searches for modules
unshift @INC, $cfgdir;
require XML::Lite;
require ATM_namelist;

#-----------------------------------------------------------------------------------------------
# Validate specified option values.
validate_options("command line", \%opts);

# Command-line option processing:
if ($opts{'runtype'} eq 'initial') { $opts{'nsrest'} = 0; }
elsif ($opts{'runtype'} eq 'restart') { $opts{'nsrest'} = 1; }
elsif ($opts{'runtype'} eq 'branch') { $opts{'nsrest'} = 3; }

my $nl = ATM_namelist->new( \%opts );

$nl->set_namelists;    # Define the namelist / read in config cache file

$nl->build;            # Build the model namelist

#-----------------------------------------------------------------------------------------------
#-----------------------------------------------------------------------------------------------


sub absolute_path {
#
# Convert a pathname into an absolute pathname, expanding any . or .. characters.
# Assumes pathnames refer to a local filesystem.
# Assumes the directory separator is "/".
#
  my $path = shift;
  my $cwd = getcwd();  # current working directory
  my $abspath;         # resulting absolute pathname

# Strip off any leading or trailing whitespace.  (This pattern won't match if
# there's embedded whitespace.
  $path =~ s!^\s*(\S*)\s*$!$1!;

# Convert relative to absolute path.

  if ($path =~ m!^\.$!) {          # path is "."
      return $cwd;
  } elsif ($path =~ m!^\./!) {     # path starts with "./"
      $path =~ s!^\.!$cwd!;
  } elsif ($path =~ m!^\.\.$!) {   # path is ".."
      $path = "$cwd/..";
  } elsif ($path =~ m!^\.\./!) {   # path starts with "../"
      $path = "$cwd/$path";
  } elsif ($path =~ m!^[^/]!) {    # path starts with non-slash character
      $path = "$cwd/$path";
  }

  my ($dir, @dirs2);
  my @dirs = split "/", $path, -1;   # The -1 prevents split from stripping trailing nulls
                                     # This enables correct processing of the input "/".

  # Remove any "" that are not leading.
  for (my $i=0; $i<=$#dirs; ++$i) {
      if ($i == 0 or $dirs[$i] ne "") {
	  push @dirs2, $dirs[$i];
      }
  }
  @dirs = ();

  # Remove any "."
  foreach $dir (@dirs2) {
      unless ($dir eq ".") {
	  push @dirs, $dir;
      }
  }
  @dirs2 = ();

  # Remove the "subdir/.." parts.
  foreach $dir (@dirs) {
    if ( $dir !~ /\.\./ ) {
        push @dirs2, $dir;
    } else {
        pop @dirs2;   # remove previous dir when current dir is ..
    }
  }
  if ($#dirs2 == 0 and $dirs2[0] eq "") { return "/"; }
  $abspath = join '/', @dirs2;
  return( $abspath );
}

#-------------------------------------------------------------------------------

sub valid_option {

    my ($val, @expect) = @_;
    my ($expect);

    $val =~ s/^\s+//;
    $val =~ s/\s+$//;
    foreach $expect (@expect) {
	if ($val =~ /^$expect$/i) { return $expect; }
    }
    return undef;
}

#-------------------------------------------------------------------------------

sub validate_options {

    my ($source, $opts) = @_;
    my ($opt, $old, @expect);
    
    # runtype
    $opt = 'runtype';
    @expect = ('initial', 'restart', 'branch');
    if (defined $opts->{$opt}) {
	$old = $opts->{$opt};
	$opts->{$opt} = valid_option($old, @expect)
	    or die "invalid value of $opt ($old) specified in $source\n".
                   "expected one of: @expect\n";
    }

}


__END__

#-------------------------------------------------------------------------------
# The following pod is used to produce the documentation for this script
# which appears in the  User's Guide
#-------------------------------------------------------------------------------

=head4 2.1.2.2 The build-namelist script

B<build-namelist> produces namelists for both GAMIL and CLM.  These are
written to a single file (F<namelist> by default) in the directory from
which B<build-namelist> is invoked.  The only required input for
B<build-namelist> is a configuration cache file produced by a previous
invocation of B<configure>.  The cache file provides information about the
configuration of the GAMIL executable that B<build-namelist> needs to provide
the correct default values for things like initial and boundary datasets.
The default values are specified in the files F<DefaultATMEXPNamelist.xml>
and F<DefaultCLMEXPNamelist.xml> in the GAMIL configuration script directory.

The user can specify namelist values that are not set by default, or can
override the values that are set by default, in two ways.  A file that
contains a namelist may be specified using the B<-infile> option, and
namelist values may be specified directly on the command-line using the
B<-namelist> option.  The command-line specification takes precedence over
values read from a file, and both take precedence over the default values.
In addition a few namelist variables may be set with specific command-line
options and these settings take precedence over the values set using
B<-namelist> or B<-infile>.  There is also an interactive prompting option
(B<-i>) which allows the user to view the namelist produced by the default
and command-line settings, and make final changes.

=head4 Options

The following options may all be specified with either one or two leading
dashes, e.g., B<-help> or B<--help>.  When multiple options are listed
separated by a vertical bar (B<|>), either version may be used.

=over 4

=item -gamil_cfg F<dir>

F<dir> is the directory that contains the GAMIL configuration scripts, which
includes perl modules as well as various defaults files that are required
by B<build-namelist>.  It is possible (but not recommended) to move
B<build-namelist> to another directory, but then the configuration script
directory must be explicitly specified so that B<build-namelist> can find
its support files.  Normally this directory will be determined by looking
at the pathname that is used to invoke B<build-namelist> (assuming that
B<build-namelist> has not been moved from the configuration script
directory).  If B<build-namelist> is not in the configuration script
directory, then that directory can be specified either by this option, by
setting the environment variable B<GAMIL_CFGDIR> to the configuration script
directory, or by setting the environment variable B<GAMIL_ROOT> to the root
directory of the GAMIL distribution assuming that the configuration directory
is B<$GAMIL_ROOT/models/atm/gamil/bld>.

Default: directory part of the absolute pathname used to invoke
B<build-namelist>

=item -case F<name>

F<name> is the case identifier for the GAMIL run (up to 32 characters).  This
value is used to set the F<caseid> variable in the ATM namelist.

Default: run

=item -config F<file>

F<file> is a configuration cache file produced by the B<configure> script.
B<build-namelist> obtains the configuration of the GAMIL executable from this
file.

Default: F<config_cache.xml>

=item -csmdata F<dir>

F<dir> is the root directory for the default initial and boundary datasets
supplied with the GAMIL distribution.  This directory can also be specified
by setting the CSMDATA environment variable.  It is assumed that the root
directory will contain the subdirectories F<atm/gamil> for GAMIL datasets and
F<lnd/clm2> for CLM datasets.

Default: F</fs/cgd/csm/inputdata>.  This value is set in the files
F<DefaultATMEXPNamelist.xml> and F<DefaultCLMEXPNamelist.xml> in the GAMIL
configuration script directory.

=item -h | -help

Print usage to STDOUT.

=item -i | -interactive

Turns on interactive prompting to modify a namelist.

=item -infile F<file>

F<file> is a namelist file to read values from.  All values read from this
file will appear in the output namelist unless they are overridden by other
values having higher precedence.

Default: none

=item -namelist F<namelist>

F<namelist> is a string that contains namelist settings using valid
namelist syntax, e.g.,

   -namelist "&atmexp nelapse=-10, trace_gas=.true. /"

Namelist values set on the command-line take precedence over values read 
from a file specified with the B<-infile> option.

Default: none

=item -o F<file>

F<file> is the filename of the output namelist.

Default: F<namelist>

=item -runtype F<name>

F<name> specifies the type of simulation.  Valid values are B<initial>,
B<restart>, or B<branch>.

Default: B<initial>

=item -s | -silent

Turns off all output to STDOUT.  Fatal error messages will still be issued
to STDERR.

=item -test

Enable checking that initial and boundary datasets exist on local filesystem.

Default: no checking

=item -v F<num>

F<num> specifies the verbosity level of the output to STDOUT.  The default
(1) echos only the name of the file produced by B<build-namelist>.  Level 2
adds echoing of the results from the B<-test> option, and level 3 adds
echoing of the default values read from the files in the GAMIL configuration
script directory.

Default: 1

=back

=head4 Environment variables

The environment variables recognized by B<build-namelist> are the following:

=over 4

=item CSMDATA

The root directory for the default initial and boundary datasets supplied
with the GAMIL distribution.  It is assumed that the root directory will
contain the subdirectories F<atm/gamil> for GAMIL datasets and F<lnd/clm2> for
CLM datasets.

=item GAMIL_ROOT

The root directory of the GAMIL distribution.  The directory containing the
configuration scripts is $GAMIL_ROOT/models/atm/gamil/bld.

=item GAMIL_CFGDIR

The directory that contains the GAMIL configuration scripts.  This is
provided only for the special case that the configuration scripts are taken
from a directory outside of the GAMIL distribution.

=back

=head4 Using build-namelist from the command-line

This section provides a few simple examples of using B<build-namelist> from
the command-line and building a namelist using interactive prompt mode.

=head4 Example 1: build a default namelist

Assume the shell variable C<gamilcfg> is set to the GAMIL configuration
directory and that B<configure> has been invoked to build a default GAMIL
executable (Eulerian dynamics at T42).  The first time a namelist for a
particular GAMIL configuration is produced, we recommend using the B<-test>
option which checks whether the initial and boundary datasets exist on a
local filesystem.  If they do not then a warning is issued to inform the
user which datasets must be copied to the directory from which GAMIL will be
run.

The invocation of B<build-namelist>,

  % $gamilcfg/build-namelist -test
  Write out namelist to: namelist 

produces the following default namelist:

  &atmexp
   absems_data = '/fs/cgd/csm/inputdata/atm/gamil/rad/abs_ems_factors_fastvx.052001.nc'
   bndtvo      = '/fs/cgd/csm/inputdata/atm/gamil/ozone/noaao3.1990.21999.nc'
   bndtvs      = '/fs/cgd/csm/inputdata/atm/gamil/sst/sst_HadOIBl_bc_64x128_clim_c020411.nc'
   caseid      = 'run'
   iyear_ad    = 1950
   ncdata      = '/fs/cgd/csm/inputdata/atm/gamil/inic/gaus/cami_0000-09-01_64x128_T42_L26_c020430.nc'
   nelapse     = -1
   nsrest      = 0
  /	       
  &clmexp      
   finidat     = '/fs/cgd/csm/inputdata/lnd/clm2/inidata/gamil/clmi_0000-09-01_64x128_T42_c020402.nc'
   fpftcon     = '/fs/cgd/csm/inputdata/lnd/clm2/pftdata/pft-physiology'
   fsurdat     = '/fs/cgd/csm/inputdata/lnd/clm2/srfdata/gamil/clms_64x128_T42_c011120.nc'
  /

B<build-namelist> used the configuration cache file (F<config_cache.xml>)
that was procuded by B<configure> to determine the dynamics package, land
model, and resolution of the GAMIL executable.  This information was used to
choose the default initial and boundary datasets.  The default run type is
an initial run (C<nsrest=0>), the run length is 1 day beyond the date of
the initial conditions (C<nelapse=-1>), and the valid year for the
calculated orbital parameters is 1950 (C<iyear_ad=1950>).

The absence of warnings from B<build-namelist> indicates that all the initial and 
boundary datasets were found on the local filesystem.


=cut
