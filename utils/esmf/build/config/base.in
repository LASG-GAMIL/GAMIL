# $Id: base.in,v 1.1.8.1 2002/04/27 15:39:02 erik Exp $
FCONF    = @FORTRAN_NAMING@
CONF     = -DESMC_HAVE_conf.h $(FCONF) 

include $(ESMF_DIR)/build/${ESMF_ARCH}/base_variables
include $(ESMF_DIR)/build/common

libc: $(LIBNAME)($(OBJSC) $(SOBJSC))
libf: $(LIBNAME)($(OBJSF))

#############

#.F.o: 
#	$(FC)  -c $(FFLAGS)  $(FOPTFLAGS) $(CPPFLAGS) $*.F
#.F.a: 
#	$(FC)  -c $(FFLAGS)  $(FOPTFLAGS) $(CPPFLAGS) $*.F
#	$(AR) clr $(LIBNAME) $*.o
#	$(RM) $*.o
#
#   These are alternative rules for Fortran compilers that 
#  do not understand the .F suffix
#
#   Note: it is not possible to use the NAG F90 compiler with 
#  Alice and a Fortran main problem. This is because the NAG
#  compiler actually generates a C main program while MPICH and
#  Alice naturally expect the command line arguments to be 
#  handled in the Fortran manner, so MPICH crashes on initializing
#  the command line arguments.
#
#.F.o:
#	-$(RM) $*.f
#	-cpp $(CFLAGS) $< | grep -v '^ *#' > $*.f
#	-$(FC) -c $(FFLAGS) $(FOPTFLAGS) $*.f
#	-$(RM) $*.f
#.F.a:
#	-$(RM) $*.f
#	-cpp $(CFLAGS)  $< | grep -v '^ *#' > $*.f
#	-$(FC) -c $(FFLAGS) $(FOPTFLAGS) $*.f
#	-$(AR) cr $(LIBNAME) $*.o
#	-$(RM) $*.o	$*.f


#SLSUFFIX = so.1.0 
# This is old code.  See the build/<arch>/base files for current information
# on creating shared libraries.  Eventually, we should use libtool or a 
# similar approach.
shared: chkopts_basic
	-@ echo making shared libraries in $(LDIR) ;\
	cd $(LDIR); \
	$(RM) -rf tmp; \
	mkdir tmp; \
	cd tmp; \
	for LIBNAME in $(SHLIBS) ; \
	do \
	  $(AR) x ../$$LIBNAME.a ;\
	  gcc $(COPTFLAGS) -fPIC -shared  *.o  -o ../$$LIBNAME.$(SLSUFFIX) ; \
	  $(RM) -f * ; \
	done ;\
	cd ../ ; \
	$(RM) -rf tmp
