#include <misc.h>
#include <params.h>

!!(wanhui 2003.10.28-29)
!!-----------------------


subroutine init_ac_switching( pmtop )

!!---------------------------------------------------------------------------
!!
!! Purpose : 
!!   1. copy initial data from CAM2 prognostics to LASG framework variables 
!!   2. switch u,v from C-grid to A-grid
!!
!!---------------------------------------------------------------------------

   use shr_kind_mod, only: r8 => shr_kind_r8
   use pmgrid, only: plond,plat,plev,i1,numbnd,beglatexdyn,endlatexdyn,beglat,endlat
   use prognostics
   use comfm1

#if ( defined SPMD )
   use mpishorthand, only: mpicom
#endif
   
   implicit none 

#if (defined SPMD)
#include <mpif.h>
#include <commpi.h>

   real(r8) :: worksb(plond*plev),workrt(plond*plev)
   integer  :: isend, irecv
   integer  :: istatus(mpi_status_size)
   integer  :: ii
#endif
   
   real(r8) :: pmtop
   integer  :: begj, endj
   integer  :: i,    jdyn, jcam, k
    
!! (wanhui 2003.06.03)
!!--------------------------------------------------------------------------
!! initial data -> fm2003 variables
!!--------------------------------------------------------------------------
     write(*,*) '!!!! init_ac----new'
     begj = beglatexdyn + numbnd
     endj = endlatexdyn - numbnd

!!--- 3-d vars----

     do k = 1,plev
      do jdyn = begj,endj

         jcam = plat + 1 - jdyn

         do i=1,plond-2

            u (i,jdyn,k) = u3 (i1+i-1,k,  jcam,n3m2)
            v (i,jdyn,k) =-v3 (i1+i-1,k,  jcam,n3m2)
            t (i,jdyn,k) = t3 (i1+i-1,k,  jcam,n3m2)
            q (i,jdyn,k) = q3 (i1+i-1,k,1,jcam,n3m2)

         enddo

            u (plond-1,jdyn,k) = u (1,jdyn,k)
            v (plond-1,jdyn,k) = v (1,jdyn,k)
            t (plond-1,jdyn,k) = t (1,jdyn,k)
            q (plond-1,jdyn,k) = q (1,jdyn,k)

            u (plond  ,jdyn,k) = u (2,jdyn,k)
            v (plond  ,jdyn,k) = v (2,jdyn,k)
            t (plond  ,jdyn,k) = t (2,jdyn,k)
            q (plond  ,jdyn,k) = q (2,jdyn,k)

      enddo
     enddo

#if (defined SPMD)

      ii = 1
      do k=1,plev
       do i=1,plond
          worksb(ii) = v(i,endj,k)
          ii = ii+1
       enddo
      enddo
      call mpi_isend(worksb, plond*plev, mpi_double_precision, ibot,1, mpicom, isend, ierr) 
      call mpi_irecv(workrt, plond*plev, mpi_double_precision, itop,1, mpicom, irecv, ierr)

#endif

!!--- 2-d vars----

      do jdyn = begj,endj

         jcam = plat + 1 - jdyn

         do i=1,plond-2                                                      
            pes(i,jdyn) =   ps(i,jcam,n3m2)*0.01d0 - pmtop                
            ghs(i,jdyn) = phis(i,jcam)
         enddo                                                               
            pes(plond-1,jdyn) = pes(1,jdyn)                                    
            pes(plond  ,jdyn) = pes(2,jdyn)                                    
            ghs(plond-1,jdyn) = ghs(1,jdyn)
            ghs(plond  ,jdyn) = ghs(2,jdyn)
      enddo                 

!---------------------------------------------------------------
!  u,v => u3,v3 on p-grid 
!---------------------------------------------------------------

      do k=1,plev
       do jdyn = begj,endj

          jcam = plat + 1 - jdyn

          do i=1,plond-2
              u3 (i1+i-1,k,jcam,n3m2) =  0.5*( u(i,jdyn,k)+u(i+1,jdyn,k) )
          enddo
              u3 (1    , k,jcam,n3m2) = u3 (plond-1,k,jcam,n3m2)
              u3 (plond, k,jcam,n3m2) = u3 (2      ,k,jcam,n3m2)
       enddo
      enddo


!--
#if ( ! defined SPMD )

      do k=1,plev
       do jdyn=2,plat-1
	  jcam= plat+1-jdyn
          do i=1,plond-2
              v3 (i1+i-1,k,jcam,n3m2) = -0.5*( v(i,jdyn-1,k)+v(i,jdyn,k) )
          enddo
              v3 (1    ,k,jcam,n3m2) = v3 (plond-1,k,jcam,n3m2)
              v3 (plond,k,jcam,n3m2) = v3 (2      ,k,jcam,n3m2)
       enddo

          do i=1,plond
              v3 (i,k,1   ,n3m2) = 0.0
              v3 (i,k,plat,n3m2) = 0.0
          enddo
      enddo
#else
      
    if (myrank.eq.nprocs-1) then
       do k=1,plev
        do i=1,plond
          v3 (i,k,endlat,n3m2) = 0.0
        enddo
       enddo
       begj = beglatexdyn + numbnd +1
    elseif (myrank.eq.0 ) then
       do k=1,plev
        do i=1,plond
          v3 (i,k,beglat,n3m2) = 0.0
        enddo
       enddo
       endj = endlatexdyn - numbnd -1
    endif

!!------------------------------------unpack the received data
	     
    call mpi_wait(isend,istatus,ierr)
    call mpi_wait(irecv,istatus,ierr)

    ii = 1 
    if (myrank.ne.nprocs-1) then
       do k=1,plev
        do i=1,plond
           v(i,beglatexdyn,k) = workrt(ii)
           ii = ii+1
        enddo
       enddo
    endif
!!------------------------------------------------

      do k=1,plev
       do jdyn=begj, endj
          jcam= plat+1-jdyn
          do i=1,plond-2
              v3 (i1+i-1,k,jcam,n3m2) = -0.5*( v(i,jdyn-1,k)+v(i,jdyn,k) )
          enddo
              v3 (1    ,k,jcam,n3m2) = v3 (plond-1,k,jcam,n3m2)
              v3 (plond,k,jcam,n3m2) = v3 (2      ,k,jcam,n3m2)
       enddo
      enddo
#endif
		    
      
     return
end subroutine init_ac_switching
